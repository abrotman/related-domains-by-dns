<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' []>
<rfc ipr="trust200902" category="std" docName="draft-brotman-rdbd-02">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc private=""?>
<?rfc topblock="yes"?>
<?rfc comments="no"?>
<front>
<title abbrev="RDBD">Related Domains By DNS</title>

<author initials="A." surname="Brotman" fullname="Alex Brotman">
<organization>Comcast, Inc</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>alex_brotman@comcast.com</email>
<uri></uri>
</address>
</author>
<author initials="S." surname="Farrell" fullname="Stephen Farrell">
<organization>Trinity College Dublin</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>stephen.farrell@cs.tcd.ie</email>
<uri></uri>
</address>
</author>
<date year="2019" month="July" day="8"/>

<area>Applications</area>
<workgroup></workgroup>
<keyword></keyword>


<abstract>
<t>This document outlines a mechanism by which a DNS domain can
publicly document the existence or absence of a relationship with a different domain, called
&quot;Related Domains By DNS&quot;, or &quot;RDBD&quot;.
</t>
</abstract>


</front>

<middle>

<section anchor="introduction" title="Introduction">
<t>[[Discussion of this draft is taking place on the dbound@ietf.org mailing list.
There's a github repo for this draft at
<eref target="https://github.com/abrotman/related-domains-by-dns"/> -
issues and PRs are welcome there.]]
</t>
<t>Determining relationships between registered domains can be one of the more difficult
investigations on the Internet.  It is typical to see something such as
<spanx style="verb">example.com</spanx> and <spanx style="verb">dept-example.com</spanx> and be unsure if there is an actual
relationship between those two domains, or if one might be an attacker
attempting to impersonate the other.  In some cases, anecdotal evidence from
the DNS or WHOIS/RDAP may be sufficient.  However, service providers of various
kinds may err on the side of caution and treat one of the domains as
untrustworthy or abusive because it is not clear that the two domains are in
fact related. This specification provides a way for one domain to
explicitly document a relationship with another, utilizing DNS records.
</t>
<t>Possible use cases include:
</t>
<t>
<list style="symbols">
<t>where a company has websites in different languages, and would like to
correlate their ownership more easily, consider <spanx style="verb">example.de</spanx> and <spanx style="verb">example.ie</spanx>
registered by regional offices of the same company;</t>
<t>following an acquisition, a domain holder might want to indicate that
example.net is now related to example.com in order to make a later migration
easier;</t>
<t>when doing Internet surveys, we should be able to provide more accurate results
if we have information as to which domains are related.</t>
</list>
</t>
<t>Similarly, a domain may wish to declare that no relationship exists with
some other domain, for example &quot;good.example&quot; may want to declare that
it is not associated with &quot;g00d.example&quot; if the latter is currently being
used in some cousin-domain style attack. In such cases, it is more
likely that there can be a larger list of names (compared to the
&quot;positive&quot; use-cases) for which there is a desire to disavow a
relationship.
</t>
<t>It is not a goal of this specification to provide a high-level of
assurance as to whether or not two domains are definitely related, nor to provide
fine-grained detail about the kind of relationship that may
exist between domains.
</t>
<t>Using &quot;Related Domains By DNS&quot;, or &quot;RDBD&quot;, it is possible to
declare that two domains are related, or to disavow such a
relationship.
</t>
<t>We include an optional digital signature mechanism that can somewhat improve the
level of assurance with which an RDBD declaration can be handled.
This mechanism is partly modelled on how DKIM <xref target="RFC6376"/> handles public
keys and signatures - a public key is hosted at the relating-domain
(e.g., <spanx style="verb">example.com</spanx>) and a reference from the related-domain
(e.g., <spanx style="verb">dept-example.com</spanx>) contains a signature (verifiable with
the <spanx style="verb">example.com</spanx> public key) over the text representation ('A-label') of
the two domain names (plus a couple of other inputs).
</t>
<t>RDBD is intended to declare or disavow a relationship between registered
domains, not individual hostnames.  That is to say that the
relationship should exist between <spanx style="verb">example.com</spanx> and <spanx style="verb">dept-example.com</spanx>,
not <spanx style="verb">foo.example.com</spanx> and <spanx style="verb">bar.dept-example.com</spanx> (where those latter
two are hosts).
</t>
<t>There already exists Vouch By Reference (VBR) <xref target="RFC5518"/>, however
this only applies to email.  RDBD could be a more general purpose solution
that could be applied to other use cases, as well as for SMTP transactions.
</t>
<t>This document describes the various options, how to
create records, and the method of validation, if the option to
use digital signatures is chosen.
</t>

<section anchor="terminology" title="Terminology">
<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
&quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;, &quot;MAY&quot;, and
&quot;OPTIONAL&quot; in this document are to be interpreted as described in
<xref target="RFC2119"/>.
</t>
<t>The following terms are used throughout this document:
</t>
<t>
<list style="symbols">
<t>Relating-domain: this refers to the domain that is
declarating a relationship exists. (This was called the
&quot;parent/primary&quot; in -00).</t>
<t>Related-domain: This refers to the domain that is
referenced by the relating-domain, such as <spanx style="verb">dept-example.com</spanx>.
(This was called the &quot;secondary&quot; in -00.)</t>
</list>
</t>
</section>
</section>

<section anchor="new-resource-record-types" title="New Resource Record Types">
<t>We define two new RRTYPES, an optional one for the relating-domain (RDBDKEY)
to store a public key for when signatures are in use and one for use in
related-domains (RDBD).
</t>

<section anchor="rdbdkey-resource-record-definition" title="RDBDKEY Resource Record Definition">
<t>The RDBDKEY record is published at the apex of the relating-domain zone.
</t>
<t>The wire and presentation format of the RDBDKEY
resource record is identical to the DNSKEY record. <xref target="RFC4034"/>
</t>
<t>[[All going well, at some point we'll be able to say...]]
IANA has allocated RR code TBD for the RDBDKEY resource record via Expert
Review.
</t>
<t>The RDBDKEY RR uses the same registries as DNSKEY for its
fields. (This follows the precedent set for CDNSKEY in <xref target="RFC7344"/>.)
</t>
<t>No special processing is performed by authoritative servers or by
resolvers, when serving or resolving.  For all practical purposes,
RDBDKEY is a regular RR type.
</t>
<t>The flags field of RDBDKEY records MUST be zero. [[Is that correct/ok? I've
no idea really:-)]]
</t>
<t>There can be multiple occurrences of the RDBDKEY resource record in the
same zone
</t>
</section>

<section anchor="rdbd-resource-record-definition" title="RDBD Resource Record Definition">
<t>To declare a relationship exists an RDBD resource record is published at the
apex of the related-domain zone.
</t>
<t>To disavow a relationship an RDBD resource record is published at the apex of
the relating-domain zone.
</t>
<t>[[All going well, at some point we'll be able to say...]]
IANA has allocated RR code TBD for the RDBD resource record via Expert
Review.
</t>
<t>The RDBD RR is class independent.
</t>
<t>The RDBD RR has no special Time to Live (TTL) requirements.
</t>
<t>There can be multiple occurrences of the RDBD resource record in the
same zone.
</t>
<t>The wire format for an RDBD RDATA consists of a two octet rdbd-tag, the
relating-domain name(s), and the optional signature fields which are: a two-octet
key-tag, a one-octet signature algorithm, and the digital signature bits.
</t>

<figure align="center"><artwork align="center" type="ascii-art">
                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           rdbd-tag            |                               /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               /
   /                        relating-domain name(s)                /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+--+-+|
   |    key-tag                    | sig-alg     |                 /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                 /
   /                            signature                          /
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork></figure>
<t>We define two possible values for the rdbd-tag in this specification,
later specifications can define new rdbd-tag values:
</t>
<t>
<list style="symbols">
<t>0: states that no relationship exists between the domains</t>
<t>1: states that some relationship exists between the domains</t>
</list>
</t>
<t>The relating-domain name(s) field contains either a single domain
name, or an HTTPS URL. In the latter case, successfully de-referencing that
URL results in a JSON object that contains the list of domain
names, such as is shown in the figure below.
</t>

<figure align="center"><artwork align="center" type="ascii-art">

    [ 
        "example.com", 
        "example.net",
        "foo.example"
    ]
    
</artwork></figure>
<t>If an optional signature is included, the sig-alg field MUST contain
the signature algorithm used, with the same values used as would be
used in an RRSIG. The key-tag MUST match the RDBDKEY RR value for
the corresponding public key.
</t>
<t>If the optional signature is omitted, then the presentation form of the
key-tag, sig-alg and signature fields MAY be omitted. If not omitted then the
sig-alg and key-tag fields MUST be zero and the signature field MUST be a an
empty string. [[Is that the right way to have optional fields in RRs? Not
sure.]]
</t>
<t>The input to signing (&quot;to-be-signed&quot; data) is the concatenation of the
following linefeed-separated (where linefeed has the value '0x0a') lines:
</t>

<figure align="center"><artwork align="center" type="ascii-art">
relating=&lt;relating-domain name or URL&gt;
related=&lt;related-domain&gt;
rdbd-tag=&lt;rdbd-tag value&gt;
key-tag=&lt;key-tag&gt;
sig-alg=&lt;sig-alg&gt;

</artwork></figure>
<t>The relating-domain and related-domain values MUST be the 'A-label'
representation of these names.
</t>
<t>The trailing &quot;.&quot; representing the DNS root MUST NOT be included in
the to-be-signed data, so a relating-domain value above might be
&quot;example.com&quot; but &quot;example.com.&quot; MUST NOT be used as input to
signing.
</t>
<t>A linefeed MUST be included after the &quot;sig-alg&quot; value in the
last line.
</t>
<t>[[Presentation syntax and to-be-signed details are very liable to change.]]
</t>
<t>See the examples in the Appendix for further details.
</t>
</section>
</section>

<section anchor="directionality-and-cardinality" title="Directionality and Cardinality">
<t>RDBD relationships are uni-directional. If bi-directional relationships
exist, then both domains can publish RDBD RRs and optionally sign those.
</t>
<t>If one domain has relationships with many others, then the relevant
RDBD RRs (and RDBDKEY RRs) can be published to represent those or
one RDBD RR can contain an HTTPS URL at which one can provide a list of
names.
</t>
</section>

<section anchor="required-signature-algorithms" title="Required Signature Algorithms">
<t>Consumers of RDBD RRs MAY support signature verification. They
MUST be able to parse/process unsigned or signed RDBD RRs even if they
cannot cryptographically verify signatures.
</t>
<t>Implementations producing RDBD RRs SHOULD support optional signing of those
and production of RDBDKEY RRs.
</t>
<t>Implementations of this specification that support signing or verifying
signatures MUST support use of RSA with
SHA256 (sig-alg==8) with at least 2048 bit RSA keys. <xref target="RFC5702"/>
</t>
<t>RSA keys SHOULD use a 2048 bit or longer modulus.
</t>
<t>Implementations of this specification that support signing or verifying
signatures SHOULD support use of Ed25519
(sig-alg==15). <xref target="RFC8080"/><xref target="RFC8032"/>
</t>
</section>

<section anchor="validation" title="Validation">
<t>A validated signature is solely meant to be additional evidence that the
relevant domains are related, or that one disavows such relationship.  The
existence or disavowal of a relationship does not by itself mean that data or
services from any domain should be considered as more or less trustworthy.
</t>
</section>

<section anchor="security-considerations" title="Security Considerations">

<section anchor="efficiacy-of-signatures" title="Efficiacy of signatures">
<t>The optional signature mechanism defined here offers no protection against an
active attack if both the RDBD and RDBDKEY values are accessed via an untrusted
path.
</t>
<t>If the RDBDKEY value has been cached, or is otherwise known via some
sufficiently secure mechanism, then the RDBD signature does confirm that the
holder of the private key (presumably the relating-domain) considered that the
relationship, or lack thereof, with the related-domain was real at some point
in time.
</t>
</section>

<section anchor="dnssec" title="DNSSEC">
<t>RDBD does not require DNSSEC. Without DNSSEC it is possible for an attacker to
falsify DNS query responses for someone investigating a relationship.
Conversely, an attacker could delete the response that would normally
demonstrate the relationship, causing the investigating party to believe there
is no link between the two domains.  An attacker could also replay an old RDBD
value that is actually no longer published in the DNS by the related-domain.
</t>
<t>Deploying signed records with DNSSEC should allow for detection
of these kinds of attack.
</t>
<t>If the relating-domain has DNSSEC deployed, but the related-domain
does not, then the optional signature can (in a sense) extend the
DNSSEC chain to cover the RDBD RR in the related-domain's zone.
</t>
<t>If both domains have DNSSEC deployed, and if the relating-domain public key has
been cached, then the the signature mechanism provides additional protection
against active attacks involving a parent of one of the domains.  Such attacks
may in any case be less likely and detectable in many scenarios as they would
be generic attacks against DNSSEC-signing (e.g. if a regisgtry injected a bogus
DS for a relating-domain into the registry's signed zone). If the
public key from the relevant RDNDKEY RRs is read from the DNS at the
same time as a related RDBD RR, then the signature mechanism provided here
may provide litle additional value over and above DNSSEC.
</t>
</section>

<section anchor="lookup-loops" title="Lookup Loops">
<t>It's conceivable that an attacker could create a loop of relationships, such as
a.com-&gt;b.com-&gt;c.com-&gt;a.com or similar.  This could cause a resource issue for
any automated system.  A system SHOULD only perform three lookups from the
first domain (a.com-&gt;b.com-&gt;c.com-&gt;d.com).  The related and relating-domains
SHOULD attempt to keep links direct and so that only the fewest number of
lookups are needed, but it is understood this may not always be possible.
</t>
</section>
</section>

<section anchor="iana-considerations" title="IANA Considerations">
<t>This document introduces two new DNS RR types, RDBD and RDBDKEY.  [[Codepoints
for those are not yet allocated by IANA, nor have codepoints been requested
so far.]]
</t>
<t>[[New rdbd-tag value handling wll need to be defined if we keep
that field. Maybe something
like: 0-255: RFC required; 256-1023: reserved; 1024-2047: Private
use; 2048-65535: FCFS.]]
</t>
</section>

<section anchor="acknowledgements" title="Acknowledgements">
<t>Thanks to all who commented on this on the dbound and other lists,
in particular to the following who provided comments that caused us
to change the draft:
Bob Harold,
John Levine,
Andrew Sullivan,
Suzanne Woolf,
and
Paul Wouters.
(We're not implying any of these fine folks actually like this
draft btw, but we did change it because of their comments:-)
Apologies to anyone we missed, just let us know and we'll add
your name here.
</t>
</section>

</middle>
<back>
<references title="Informative References">
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4034.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5518.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5702.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6376.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7344.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8032.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8080.xml"?>
</references>

<section anchor="examples" title="Examples">
<t>This appendix provides examples of RDBD-related values.
The following names and other values are used in these examples.
</t>
<t>
<list style="symbols">
<t>Relating domain: my.example</t>
<t>Related domain: my-way.example</t>
<t>Unrelated domain: my-bad.example</t>
<t>URL for other related domains: <eref target="https://example.com/related-names"/></t>
<t>URL for other unrelaed domains: <eref target="https://example.com/unrelateds"/></t>
</list>
</t>
<t>The github repo
<eref target="https://github.com/abrotman/related-domains-by-dns"/>
has a script in sample/mk_samples.sh that generated this appendix.
</t>

<section anchor="unsigned-examples" title="Unsigned Examples">

<figure align="center"><artwork align="center" type="ascii-art">

;ZONE FILE FRAGMENT STARTS
; assertion that my-way.example claims to be related 
; to my.example
my-way.example. 3600 IN RDBD 1 my.example.

; assertion that my-way.example claims not to be 
; related to my-bad.example
my-way.example. 3600 IN RDBD 0 my-bad.example.

; assertion that my-way.example claims to be related 
; to whatever is at https://example.com/related-names
my-way.example. 3600 IN RDBD 1 https://example.com/related-names

; assertion that my-way.example claims not to be 
; related to whatever is at https://example.com/related-names
my-way.example. 3600 IN RDBD 0 https://example.com/unrelateds

;ZONE FILE FRAGMENT ENDS

</artwork></figure>
</section>

<section anchor="rsasigned-example" title="RSA-signed Example">

<figure align="center"><artwork align="center" type="ascii-art">

# BASH SNIPPET STARTS
# HOWTO generate RSA key pair
$ openssl genrsa -out rsa.private 2048
Generating RSA private key, 2048 bit long modulus (2 primes)
.....................+++++
.....................+++++
e is 65537 (0x010001)
writing RSA key
$ openssl rsa -in rsa.private -out rsa.public -pubout \
     -outform PEM 
$ cat rsa.private
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA3qg68hd/EOys5T4WrhsjXpTPjYoIUzIggTC9N5Q5aBb86/lH
RwHCjrKg6ws31SR9LEqeHMq0Wv/oUZOISs54yLWZWa5B0ZtaJw/3b8wwMFsu2IAO
c5vnYqryR61Ln10CsDRsrzLXxqfGYbnUzZ5WkDjwBYflGw1XfLLSugvAaYIq+gz8
J/SxwLkZqfsR0Jkvcn+kHh51YLNMFNBn8CUElA3tSkWDR9wIK4WK9LRT3e9xc6rH
lHRi/Ubst+E21r7loxfU08OHVeUL0G1F9dEswT8BYaCtUnf3wpWoFknrZD4HWU+E
mG54MDjSQPBNu0iKLS3sBGn6obrmGTMdWSqyxwIDAQABAoIBAFbhBb8Y8/fCoeQB
ShA9fpuVLTdpOL5dvNksD2j0aUH4VlAtQGawhR3xDWEpS2vbhQwXQYKyhZVMbXYH
PxMRZYfLdD7OA9ip6Y98Z2w0HEmCCtFnhjwOBUc2tLrLH8rbHAVtL0tdZ1yYcowH
WsWwls5HqUA/OmJH3m9Fx3vYwgdojL0BfTD9BzMdrRnYGn3D4W+5nyhK3Cfkm3fZ
EYrG7ZfPyGf1eVQ7fMw9U95iANnz52N4fUN8C+EhwgZHCCmlSpK64aPG8dXkNOXW
G99MHL3rw4e+z3XbpNQvzL0xfsqh4vCEImTJ0I7MMRUVuRHK/SV+YHMrstcAKysU
BiO4ogECgYEA9iTg6OHQGSW8hgYxgXx8IgZhkTJI/QrddgZB83g4nypu0KggtQza
qoAomUnw8uT372ACgu2+KFBjiv0BlRPfCJDxNqN3jPfG8H74YpPSjNuw5xe9Jye4
1VJfncqJssEeblHTot43x/MuIewfP4FkbyW2DYGf8NE3rAlNl+Vb3MECgYEA55KY
2i/Q+5edOvKU3N+kctEyjCeZXB3tMCaeDuD+X0IqJEjJiGrE+DN9nmD72ST3p6Tl
umFXxbIT19vb7GVlztCqKHkrr8H3ZX+3lYYIwVpbl8pyKwVGS6UkiCTEEMrXEA4u
NStgFIrCXvMU6IJ9Z2NLHu0GH7tCX8p3/UQWiYcCgYBRp6hI+Whcf01MNM/FgfN4
Ih/J2CGoeCtBlQ/Z4f7+pkf+xlebWDlOKJfPSl05ZsXtTi9nGdFkdE6hdA9LUj1C
DTtIAfCN/kCr1aM2qI1HlzXXY+OnEqFZeysnIGKPv0sGE/UeaZOdrEmYjUlMevND
gAIl9uOFMxLB6pAoHLldwQKBgQCBL95H8l8CzH0xkn0Lj1Q9nYk2eSzsH+Hfd9u7
bzdZSx8ZaOXNTcsesBMHVRGK/T2P78UdKgr+Ri8dwBC7m4GlU/FpbNe7UFlE7XAs
YT7nJxJr5su0RlgGAVYVAXXD7HT4BwEuNkl+jD6NG8zxPULad6FD2nUNJLmNmPVB
fEeaZwKBgDdfhcNhnLNP0CQjPlte5ZStdM0mTT7sxW9kdZdKgjvuNomxEOsPB20j
9GKFXD5WeH+U70l0eQsuX5JPzBDiYczv6KJk9WZlJE+kMzgSehiH2LyBQzGfQqZa
pHeX0ceNO7dbe85QxUUQ9W65ydMvF2D83dj7EIvpUwdgDmA3F5Q/
-----END RSA PRIVATE KEY-----
$ cat rsa.public
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3qg68hd/EOys5T4Wrhsj
XpTPjYoIUzIggTC9N5Q5aBb86/lHRwHCjrKg6ws31SR9LEqeHMq0Wv/oUZOISs54
yLWZWa5B0ZtaJw/3b8wwMFsu2IAOc5vnYqryR61Ln10CsDRsrzLXxqfGYbnUzZ5W
kDjwBYflGw1XfLLSugvAaYIq+gz8J/SxwLkZqfsR0Jkvcn+kHh51YLNMFNBn8CUE
lA3tSkWDR9wIK4WK9LRT3e9xc6rHlHRi/Ubst+E21r7loxfU08OHVeUL0G1F9dEs
wT8BYaCtUnf3wpWoFknrZD4HWU+EmG54MDjSQPBNu0iKLS3sBGn6obrmGTMdWSqy
xwIDAQAB
-----END PUBLIC KEY-----
# To-be-signed data for RSA
$ cat  to-be-signed-8.txt
relating=my.example
related=my-way.example
rdbd-tag=1
key-tag=33971
sig-alg=8
# Sign that
$ openssl dgst -sha256 -sign rsa.private -out rsa.sig \
        to-be-signed-8.txt
# Hexdump of signature
$ hexdump rsa.sig
0000000 a9d7 6ad5 f74b ab42 8dec 6cc3 b992 69ce
0000010 0ef6 19d2 7e8a 26a0 7e31 cea5 8d79 73f6
0000020 1d9a 3222 dc2e d5b6 45b6 5275 9ce9 5a87
0000030 c29e fb91 85b8 33d6 9666 09bc 8d2c d0bd
0000040 a3fd 39da 8b94 7795 6120 8659 f5ec 8358
0000050 dd66 69d6 8f92 3d8b 3176 ae62 98ad a799
0000060 97bc 3db9 2f22 958b a4a3 3c26 7ead c016
0000070 ad8d 701c b3ad 416b b432 e7e5 e360 d2fe
0000080 35ba 4db1 143d d2bb 5cf2 fb21 5bbe 5bce
0000090 a5fb a7ab 528f a74b fe6e 3ef3 8547 5d8a
00000a0 9b1c 3393 459c 335c cc59 2479 5a5b 3de5
00000b0 ab6c 4333 8dac 233e e4ea 98ec ac00 f8d7
00000c0 f0c4 0e15 c737 5479 3247 c648 0127 cfc5
00000d0 c3ef bb05 dc95 4f12 f2ee 723b 9c17 3f24
00000e0 14c3 b225 c581 0134 8531 1800 b816 d775
00000f0 3597 3c68 6225 32e4 7238 c188 5309 ac2c
0000100
# BASH SNIPPET ENDS

; ZONE FILE FRAGMENT STARTS
; The RDBDKEY RR for my.example is...
my.example. 3600 IN RDBDKEY 0 3 8 (
            LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5C
            Z2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEz
            cWc2OGhkL0VPeXM1VDRXcmhzagpYcFRQallvSVV6SWdnVEM5
            TjVRNWFCYjg2L2xIUndIQ2pyS2c2d3MzMVNSOUxFcWVITXEw
            V3Yvb1VaT0lTczU0CnlMV1pXYTVCMFp0YUp3LzNiOHd3TUZz
            dTJJQU9jNXZuWXFyeVI2MUxuMTBDc0RSc3J6TFh4cWZHWWJu
            VXpaNVcKa0Rqd0JZZmxHdzFYZkxMU3VndkFhWUlxK2d6OEov
            U3h3TGtacWZzUjBKa3ZjbitrSGg1MVlMTk1GTkJuOENVRQps
            QTN0U2tXRFI5d0lLNFdLOUxSVDNlOXhjNnJIbEhSaS9VYnN0
            K0UyMXI3bG94ZlUwOE9IVmVVTDBHMUY5ZEVzCndUOEJZYUN0
            VW5mM3dwV29Ga25yWkQ0SFdVK0VtRzU0TURqU1FQQk51MGlL
            TFMzc0JHbjZvYnJtR1RNZFdTcXkKeHdJREFRQUIKLS0tLS1F
            TkQgUFVCTElDIEtFWS0tLS0tCg== )
; The RDBD RR to be published by my-way.example is...
my-way.example. 3600 IN RDBD 1 my.example 33971 8 (
            16nVakv3QqvsjcNskrnOafYO0hmKfqAmMX6lznmN9nOaHSIy
            Lty21bZFdVLpnIdansKR+7iF1jNmlrwJLI290P2j2jmUi5V3
            IGFZhuz1WINm3dZpko+LPXYxYq6tmJmnvJe5PSIvi5WjpCY8
            rX4WwI2tHHCts2tBMrTl52Dj/tK6NbFNPRS70vJcIfu+W85b
            +6Wrp49SS6du/vM+R4WKXRybkzOcRVwzWcx5JFta5T1sqzND
            rI0+I+rk7JgArNf4xPAVDjfHeVRHMkjGJwHFz+/DBbuV3BJP
            7vI7checJD/DFCWygcU0ATGFABgWuHXXlzVoPCVi5DI4cojB
            CVMsrA== )
; ZONE FILE FRAGMENT ENDS

</artwork></figure>
</section>

<section anchor="ed25519signed-example" title="Ed25519-signed Example">

<figure align="center"><artwork align="center" type="ascii-art">
# BASH SNIPPET STARTS
# HOWTO generate an Ed25519 key pair...
$ ./ed25519-signer.py -s rdbd-example0001rdbd-example0002 \
   -r my.example -d my-way.example
private:b'726462642d6578616d706c6530303031726462642d6578616d
706c6530303032'
public:b'353fc31e1168c91f0af65d6c26fd441fb7df9671a23a746bb3e
c86be8d35b648'
b64pubkey: NT/DHhFoyR8K9l1sJv1EH7fflnGiOnRrs+yGvo01tkg=
keyid: 35988
to-be-signed:|relating=my.example
related=my-way.example
rdbd-tag=1
key-tag=35988
sig-alg=15
|
sig:b'64bc444ce759fb9435fe9c1875eb241c4ec6d0995cd8138a372782
32fc8e79f53cb8f88059f6040054c61be8cfd73fd44521f73994628fc7c3
0135fa929ab00f'
# hex dump of Ed25519 private
$ hexdump ed25519.priv
0000000 6472 6462 652d 6178 706d 656c 3030 3130
0000010 6472 6462 652d 6178 706d 656c 3030 3230
0000020
# hex dump of Ed25519 public
$ hexdump ed25519.pub
0000000 3f35 1ec3 6811 1fc9 f60a 6c5d fd26 1f44
0000010 dfb7 7196 3aa2 6b74 ecb3 be86 358d 48b6
0000020
# hex dump of Ed25519 signature
$ hexdump ed25519.sig
0000000 bc64 4c44 59e7 94fb fe35 189c eb75 1c24
0000010 c64e 99d0 d85c 8a13 2737 3282 8efc f579
0000020 b83c 80f8 f659 0004 c654 e81b d7cf d43f
0000030 2145 39f7 6294 c78f 01c3 fa35 9a92 0fb0
0000040
# BASH SNIPPET ENDS

; ZONE FILE FRAGMENT STARTS
; The RDBDKEY RR for my.example is...
my.example. 3600 IN RDBDKEY 0 3 15 (
            NT/DHhFoyR8K9l1sJv1EH7fflnGiOnRrs+yGvo01tkg= ) 
; The RDBD RR to be published by my-way.example is...
my-way.example. 3600 IN RDBD 0 my.example 35988 15 (
            ZLxETOdZ+5Q1/pwYdeskHE7G0Jlc2BOKNyeCMvyOefU8uPiA
            WfYEAFTGG+jP1z/URSH3OZRij8fDATX6kpqwDw== ) 
; ZONE FILE FRAGMENT ENDS

</artwork></figure>
</section>
</section>

<section anchor="ed25519-signing-code" title="Ed25519 Signing Code">
<t>Since OpenSSL does not yet support Ed25519 signing via its command
line tool, we generate our example using the python script below,
which is called as &quot;ed25519-signer.py&quot; above.
This uses the python library from Appendix A of <xref target="RFC8032"/>.
</t>

<figure align="center"><artwork align="center" type="ascii-art">

#!/usr/bin/env python3
# CODE_BEGINS
import argparse, sys, binascii
from eddsa2 import Ed25519

# from https://gist.github.com/wido/4c6288b2f5ba6d16fce37dca3fc2cb4a
def calc_keyid(flags, protocol, algorithm, dnskey):
    st=struct.pack('!HBB', int(flags), int(protocol), int(algorithm))
    st+=base64.b64decode(dnskey)
    cnt = 0
    for idx in range(len(st)):
        s = struct.unpack('B', st[idx:idx+1])[0]
        if (idx % 2) == 0:
            cnt += s &lt;&lt; 8
        else:
            cnt += s
    return ((cnt &amp; 0xFFFF) + (cnt &gt;&gt; 16)) &amp; 0xFFFF

def main():
    parser=argparse.ArgumentParser(description='Ed25519 signing')
    parser.add_argument('-s','--secret',
                        dest='secret', help='secret key')
    parser.add_argument('-r','--relating',
                        dest='relating', help='relating domain')
    parser.add_argument('-d','--related',
                        dest='related', help='related domain')
    parser.add_argument('-n','--negative',
                        dest='negative', help='negative assertion')
    args=parser.parse_args()

    if args.secret is None:
        print("You do need a secret... - exiting")
        sys.exit(1)
    # secret has to be 32 octets funnily enuugh:-)
    # e.g. secret="rdbd-example0001rdbd-example0002".encode('utf-8')
    if len(args.secret)!=32:
        print("Secret has to be 32 octets... - exiting")
        sys.exit(1)
    if args.relating is None:
        print("You do need a relating domain... - exiting")
        sys.exit(1)
    if args.related is None:
        print("You do need a related domain... - exiting")
        sys.exit(1)
    secret=args.secret.encode('utf-8')
    privkey,pubkey = Ed25519.keygen(secret)
    print("private:"+ str(binascii.hexlify(privkey)))
    print("public:"+ str(binascii.hexlify(pubkey)))

    b64pubkey=binascii.b2a_base64(pubkey).rstrip().decode("utf-8")
    print("b64pubkey: " + b64pubkey)

    keyid=calc_keyid("0","3","15",b64pubkey)
    print("keyid: " + str(keyid))

    rdbdtag="1"
    if args.negative:
        rdbdtag="0"

    tbs="relating="+args.relating+"\nrelated="+\
          args.related+"\nrdbd-tag="+rdbdtag+\
          "\nkey-tag="+str(keyid)+"\nsig-alg=15\n"
    print("to-be-signed:|" + str(tbs)+"|")

    with open("ed25519.priv", "wb") as privf:
        privf.write(privkey)
    with open("ed25519.pub","wb") as pubf:
        pubf.write(pubkey)
    with open("to-be-signed-15.txt","wb") as tbsf:
        tbsf.write(tbs.encode('utf-8'))

    msg=tbs.encode('utf-8')
    signature = Ed25519.sign(privkey, pubkey, msg)
    print("sig:"+ str(binascii.hexlify(signature)))
    with open("ed25519.sig", "wb") as sigf:
        sigf.write(signature)
    return

if __name__ == "__main__":
    main()

# CODE_ENDS
</artwork></figure>
</section>

<section anchor="changes-and-open-issues" title="Changes and Open Issues">
<t>[[RFC editor: please delete this appendix ]]
</t>

<section anchor="changes-from-01-to-02" title="Changes from -01 to -02">
<t>
<list style="symbols">
<t>Added negative assertions</t>
<t>Added URL option</t>
<t>Made sample generation script</t>
<t>Typo fixes</t>
</list>
</t>
</section>

<section anchor="changes-from-00-to-01" title="Changes from -00 to -01">
<t>
<list style="symbols">
<t>Changed from primary/secondary to relating/related (better suggestions
are still welcome)</t>
<t>Moved away from abuse of TXT RRs</t>
<t>We now specify optional DNSSEC-like signatures (we'd be fine with moving
back to a more DKIM-like mechanism, but wanted to see how this looked)</t>
<t>Added Ed25519 option</t>
<t>Re-worked and extended examples</t>
</list>
</t>
</section>

<section anchor="open-issues" title="Open Issues">
<t>Current open github issues include:
</t>
<t>
<list style="symbols">
<t>#5: specify input for signing more precisely - e.g. is there a CR or NULL or not</t>
<t>#6: what, if anything, does rdbd for example.com mean for foo.example.com?</t>
</list>
</t>
<t>These can be seen at: <eref target="https://github.com/abrotman/related-domains-by-dns/issues"/>
</t>
</section>
</section>

</back>
</rfc>
